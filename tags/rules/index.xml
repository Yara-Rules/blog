<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rules on YaraRules Project</title>
    <link>https://yararules.com/tags/rules/</link>
    <description>Recent content in rules on YaraRules Project</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-EN</language>
    <managingEditor>yararules@gmail.com (YaraRules)</managingEditor>
    <webMaster>yararules@gmail.com (YaraRules)</webMaster>
    <copyright>(c) 2017 YaraRules Project.</copyright>
    <lastBuildDate>Thu, 06 Apr 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://yararules.com/tags/rules/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Yara Rules Strings: Statistical study</title>
      <link>https://yararules.com/2017/04/06/yara-rules-strings-statistical-study/</link>
      <pubDate>Thu, 06 Apr 2017 00:00:00 +0000</pubDate>
      <author>yararules@gmail.com (YaraRules)</author>
      <guid>https://yararules.com/2017/04/06/yara-rules-strings-statistical-study/</guid>
      <description>As all Yara users know, Yara rules are based on &amp;ldquo;strings&amp;rdquo;; which are basically descriptions of patterns-based malware families. We can find simple rules like the following, for example:
rule LIGHTDART_APT1 { meta: author = &amp;quot;AlienVault Labs&amp;quot; info = &amp;quot;CommentCrew-threat-apt1&amp;quot; strings: $s1 = &amp;quot;ret.log&amp;quot; wide ascii $s2 = &amp;quot;Microsoft Internet Explorer 6.0&amp;quot; wide ascii $s3 = &amp;quot;szURL Fail&amp;quot; wide ascii $s4 = &amp;quot;szURL Successfully&amp;quot; wide ascii $s5 = &amp;quot;%s&amp;amp;sdate=%04ld-%02ld-%02ld&amp;quot; wide ascii condition: all of them } On the other hand, there are also more complex rules that use wild-cards, regular expressions, special operators or any other features that can be used in Yara and can be consulted in the documentation.</description>
    </item>
    
    <item>
      <title>YaGo, converting Yara rules into JSON files</title>
      <link>https://yararules.com/2017/03/27/yago-converting-yara-rules-into-json-files/</link>
      <pubDate>Mon, 27 Mar 2017 00:00:00 +0000</pubDate>
      <author>yararules@gmail.com (YaraRules)</author>
      <guid>https://yararules.com/2017/03/27/yago-converting-yara-rules-into-json-files/</guid>
      <description>NOTE Yago project is archived and no longer maintained.
Yara-Rules project is proud to anounce YaGo. YaGo is a tool that converts Yara rules into JSON files, that&amp;rsquo;s it, simple.
Yara has a great comunity that use it and use a lot of rules, but sometimes it is hard to manage all of them, it is difficult to get a bird&amp;rsquo;s eye view of your rule set so we thought coverting the rules in json format will help.</description>
    </item>
    
    <item>
      <title>YaraRules now on GitHub</title>
      <link>https://yararules.com/2015/04/27/yararules-now-on-github/</link>
      <pubDate>Mon, 27 Apr 2015 00:00:00 +0100</pubDate>
      <author>yararules@gmail.com (YaraRules)</author>
      <guid>https://yararules.com/2015/04/27/yararules-now-on-github/</guid>
      <description>If youâ€™re interested in sharing your Yara rules with us and the Security Community, you can join our Telegram Group, send a message to our Twitter account @YaraRules, or submit a pull request on our Github Repository.
We have divided our ruleset in five categories, each one of them represented by a file: AntiDebug, Crypto, Malicious Document, Packer and Malware. Also, the malware category is split in a per malware family basis.</description>
    </item>
    
  </channel>
</rss>